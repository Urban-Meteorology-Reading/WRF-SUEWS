{
    "Registry.EM_COMMON": {
        "filePath": "Registry",
        "query": {
            "package   ssibscheme     sf_surface_physics==8": [
                "package   suewsscheme    sf_surface_physics==9       - state:LAI_SUEWS,albDecTr_SUEWS,albEveTr_SUEWS,albGrass_SUEWS,NumCapita,DecidCap_SUEWS,porosity_SUEWS,GDD_SUEWS,HDD_SUEWS,state_SUEWS,soilmoist_SUEWS,surf_var_SUEWS,landusef_SUEWS,alb_SUEWS,emis_SUEWS,qn1_av_SUEWS,qn1_s_SUEWS,dqndt_SUEWS,dqnsdt_SUEWS,MeltWaterStore,SnowAlb,WUDay,z0m_in,zdm_in"
            ],
            "config   real    dt derived max_domains    2.": [
                "rconfig   real    dt_prev derived max_domains    2.      h     \"dt_prev\"   \"TEMPORAL RESOLUTION\"      \"SECONDS\""
            ]
        }
    },
    "Registry.EM": {
        "filePath": "Registry",
        "query": {
            "include registry.dimspec": [
                "include registry.suews"
            ]
        }
    },
    "module_check_a_mundo.F": {
        "filePath": "share",
        "query": {
            "ELSE IF (   model_config_rec % sf_surface_physics(1) .EQ. SLABSCHEME   ) THEN": [
                "  model_config_rec % num_soil_layers = 5",
                "      ELSE IF (   model_config_rec % sf_surface_physics(1) .EQ. SUEWSSCHEME   ) THEN"
            ]
        }
    },
    "start_em.F": {
        "filePath": "dyn_em",
        "query": {
            ",grid%QKE": [
                " ,grid%landusef_SUEWS &",
                " ,grid%alb_SUEWS &",
                " ,grid%emis_SUEWS &",
                " ,grid%qn1_av_SUEWS &",
                " ,grid%qn1_s_SUEWS &",
                " ,grid%dqndt_SUEWS &",
                " ,grid%dqnsdt_SUEWS &"
            ]
        }
    },
    "module_physics_init.F": {
        "filePath": "phys",
        "query": {
            ",QKE": [
                " ,landusef_SUEWS &",
                " ,alb_SUEWS &",
                " ,emis_SUEWS &",
                " ,qn1_av_SUEWS &",
                " ,qn1_s_SUEWS &",
                " ,dqndt_SUEWS &",
                " ,dqnsdt_SUEWS &"
            ],
            "REAL,     DIMENSION(1:num_soil_layers),      INTENT(INOUT) :: ZS,DZS": [
                "   REAL,OPTIONAL,DIMENSION(ims:ime,7,jms:jme),INTENT(INOUT) :: landusef_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,7,jms:jme),INTENT(INOUT) :: alb_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,7,jms:jme),INTENT(INOUT) :: emis_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: qn1_av_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: qn1_s_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: dqndt_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: dqnsdt_SUEWS"
            ],
            " SFCEVP,GRDFLX,": [
                " lu_state, &",
                " julday, &",
                " cen_lat, &",
                " landusef_SUEWS, &",
                " alb_SUEWS, &",
                " emis_SUEWS, &",
                " qn1_av_SUEWS, &",
                " qn1_s_SUEWS, &",
                " dqndt_SUEWS, &",
                " dqnsdt_SUEWS, &"
            ],
            "QKE, SFCEVP,GRDFLX,": [
                " lu_state, &",
                " julday, &",
                " cen_lat, &",
                " landusef_SUEWS, &",
                " alb_SUEWS, &",
                " emis_SUEWS, &",
                " qn1_av_SUEWS, &",
                " qn1_s_SUEWS, &",
                " dqndt_SUEWS, &",
                " dqnsdt_SUEWS, &"
            ],
            "USE module_sf_slab": [
                "   USE module_sf_suews"
            ],
            "   REAL,     DIMENSION( ims:ime , kms:kme , jms:jme ) , INTENT(INOUT), OPTIONAL :: QKE": [
                "   REAL,OPTIONAL,DIMENSION( : ),INTENT(INOUT) :: lu_state",
                "   INTEGER, INTENT(IN) :: julday",
                "   REAL, INTENT(IN) :: cen_lat",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,7,jms:jme),INTENT(INOUT) :: landusef_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,7,jms:jme),INTENT(INOUT) :: alb_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,7,jms:jme),INTENT(INOUT) :: emis_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: qn1_av_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: qn1_s_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: dqndt_SUEWS,dqnsdt_SUEWS"
            ],
            "   sfc_select: SELECT CASE(config_flags%sf_surface_physics)": [
                "      CASE (SUEWSSCHEME)",
                "   call wrf_debug(100, 'before calling suewsinit')",
                "    CALL suewsinit( &",
                " lu_state, &",
                " MMINLU, &",
                " julday, &",
                " cen_lat, &",
                " NLCAT, &",
                " landusef, &",
                " landusef_SUEWS, &",
                " alb_SUEWS, &",
                " emis_SUEWS, &",
                " qn1_av_SUEWS, &",
                " qn1_s_SUEWS, &",
                " dqndt_SUEWS,  dqnsdt_SUEWS,    &",
                " restart, allowed_to_read, &",
                " ids, ide, jds, jde, kds, kde,  &",
                " ims, ime, jms, jme, kms, kme,  &",
                " its, ite, jts, jte, kts, kte   )"
            ]
        }
    },
    "module_first_rk_step_part1.F": {
        "filePath": "dyn_em",
        "query": {
            "ACGRDFLX=grid%acgrdflx  ,ACHFX=grid%achfx ,ACLHF=grid%aclhf": [
                "     & ,DT_prev=grid%dt_prev &"
            ],
            "! end of CLM variables": [
                "! variables for SUEWS: START",
                "     & ,year=yr, day_int=day, hour=hr, minute=minute, second=sec &",
                "     & ,LAI_SUEWS=grid%LAI_SUEWS &",
                "     & ,albDecTr_SUEWS=grid%albDecTr_SUEWS &",
                "     & ,albEveTr_SUEWS=grid%albEveTr_SUEWS &",
                "     & ,albGrass_SUEWS=grid%albGrass_SUEWS &",
                "     & ,NumCapita=grid%NumCapita &",
                "     & ,DecidCap_SUEWS=grid%DecidCap_SUEWS &",
                "     & ,porosity_SUEWS=grid%porosity_SUEWS &",
                "     & ,GDD_SUEWS=grid%GDD_SUEWS &",
                "     & ,HDD_SUEWS=grid%HDD_SUEWS &",
                "     & ,state_SUEWS=grid%state_SUEWS &",
                "     & ,soilmoist_SUEWS=grid%soilmoist_SUEWS &",
                "     & ,surf_var_SUEWS=grid%surf_var_SUEWS &",
                "     & ,landusef_SUEWS=grid%landusef_SUEWS &",
                "     & ,alb_SUEWS=grid%alb_SUEWS &",
                "     & ,QN_SUEWS=grid%QN_SUEWS &",
                "     & ,AH_SUEWS=grid%AH_SUEWS &",
                "     & ,emis_SUEWS=grid%emis_SUEWS &",
                "     & ,qn1_av_SUEWS=grid%qn1_av_SUEWS &",
                "     & ,qn1_s_SUEWS=grid%qn1_s_SUEWS &",
                "     & ,dqndt_SUEWS=grid%dqndt_SUEWS &",
                "     & ,dqnsdt_SUEWS=grid%dqnsdt_SUEWS &",
                "     & ,MeltWaterStore=grid%MeltWaterStore &",
                "     & ,SnowAlb=grid%SnowAlb &",
                "     & ,WUDay=grid%WUDay &",
                "     & ,z0m_in=grid%z0m_in &",
                "     & ,zdm_in=grid%zdm_in &",
                "! variables for SUEWS: End"
            ]
        }
    },
    "module_surface_driver.F": {
        "filePath": "phys",
        "query": {
            "acgrdflx,achfx,aclhf": [
                "     & ,dt_prev &"
            ],
            "     !  Optional urban": [
                "     &   ,year, day_int, hour, minute, second &",
                "     &   ,LAI_SUEWS &",
                "     &   ,albDecTr_SUEWS &",
                "     &   ,albEveTr_SUEWS &",
                "     &   ,albGrass_SUEWS &",
                "     &   ,NumCapita &",
                "     &   ,DecidCap_SUEWS &",
                "     &   ,porosity_SUEWS &",
                "     &   ,GDD_SUEWS &",
                "     &   ,HDD_SUEWS &",
                "     &   ,state_SUEWS &",
                "     &   ,soilmoist_SUEWS &",
                "     &   ,surf_var_SUEWS &",
                "     &   ,landusef_SUEWS &",
                "     &   ,alb_SUEWS &",
                "     &   ,emis_SUEWS &",
                "     &   ,QN_SUEWS &",
                "     &   ,AH_SUEWS &",
                "     &   ,qn1_av_SUEWS &",
                "     &   ,qn1_s_SUEWS &",
                "     &   ,dqndt_SUEWS &",
                "     &   ,dqnsdt_SUEWS &",
                "     &   ,MeltWaterStore &",
                "     &   ,SnowAlb &",
                "     &   ,WUDay &",
                "     &   ,z0m_in &",
                "     &   ,zdm_in &"
            ],
            ",SLABSCHEME": [
                " ,SUEWSSCHEME &"
            ],
            "USE module_sf_slab": [
                "   USE module_sf_suews"
            ],
            "   REAL, INTENT(IN )::   DT": [
                "   REAL, INTENT(IN )::   DT_PREV"
            ],
            " REAL, DIMENSION( ims:ime, jms:jme ), OPTIONAL, INTENT(IN):: diffuse_frac": [
                "   INTEGER, OPTIONAL, INTENT(IN )::   year, day_int, hour, minute, second",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,3,jms:jme),INTENT(INOUT) :: LAI_SUEWS      !LAI for each veg surface [m2 m-2]",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: albDecTr_SUEWS !Albedo of deciduous trees [-]",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: albEveTr_SUEWS !Albedo of evergreen trees [-]",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: albGrass_SUEWS !Albedo of grass[-]",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: NumCapita !Number of people in the study area per hectare [ha-1]",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: DecidCap_SUEWS !Storage capacity of deciduous trees [mm]",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: porosity_SUEWS !Porosity of deciduous trees [-]",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,5,jms:jme),INTENT(INOUT) :: GDD_SUEWS      !Growing Degree Days (see SUEWS_DailyState.f95)",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,12,jms:jme),INTENT(INOUT) :: HDD_SUEWS      !Growing Degree Days (see SUEWS_DailyState.f95)",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,7,jms:jme),INTENT(INOUT) :: state_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,7,jms:jme),INTENT(INOUT) :: soilmoist_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,7,jms:jme),INTENT(INOUT) :: surf_var_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,7,jms:jme),INTENT(INOUT) :: landusef_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,7,jms:jme),INTENT(INOUT) :: alb_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,7,jms:jme),INTENT(INOUT) :: emis_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: QN_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: ah_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: qn1_av_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: qn1_s_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: dqndt_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: dqnsdt_SUEWS",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,7,jms:jme),INTENT(INOUT) :: MeltWaterStore",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: SnowAlb",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,9,jms:jme),INTENT(INOUT) :: WUDay",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: z0m_in",
                "   REAL,OPTIONAL,DIMENSION(ims:ime,jms:jme),INTENT(INOUT) :: zdm_in"
            ],
            "     sfc_select: SELECT CASE(sf_surface_physics)": [
                "     CASE (SUEWSSCHEME)",
                "       IF (PRESENT(qv_curr) .AND.    &",
                "    PRESENT(capg) .AND.    &",
                " .TRUE. ) THEN",
                "    DO j=j_start(ij),j_end(ij)",
                "    DO i=i_start(ij),i_end(ij)",
                "     !   CQS2 ACCOUNTS FOR MAVAIL FOR SFCDIAGS 2M Q",
                " CQS2(I,J)= CQS2(I,J)*MAVAIL(I,J)",
                "    ENDDO",
                "    ENDDO",
                "    IF ( FRACTIONAL_SEAICE == 1 ) THEN",
                " CALL wrf_error_fatal('SUEWS scheme cannot be used with fractional seaice')",
                "    ENDIF",
                "WRITE( message,* ) ' calling suewsdrv',sf_surface_physics",
                "call wrf_debug(100, message)",
                "   CALL suewsdrv(year, day_int, hour, minute, second, xtime, &",
                " t_phy, qv_curr, p8w, u_phy, v_phy, dz8w, swdown,      &",
                " psfc, rainbl, ht, &",
                " QN_SUEWS,AH_SUEWS, grdflx, hfx, qfx, lh, tsk, qsfc, chklowq, &",
                " LAI_SUEWS, &",
                " albDecTr_SUEWS, &",
                " albEveTr_SUEWS, &",
                " albGrass_SUEWS, &",
                " NumCapita, &",
                " DecidCap_SUEWS, &",
                " porosity_SUEWS, &",
                " GDD_SUEWS, &",
                " HDD_SUEWS, &",
                " state_SUEWS, &",
                " soilmoist_SUEWS, &",
                " surf_var_SUEWS, &",
                " landusef_SUEWS, &",
                " alb_SUEWS, &",
                " emis_SUEWS, &",
                " qn1_av_SUEWS, &",
                " qn1_s_SUEWS, &",
                " dqndt_SUEWS, &",
                " dqnsdt_SUEWS, &",
                " MeltWaterStore, &",
                " SnowAlb, &",
                " WUDay, &",
                " z0m_in, &",
                " zdm_in, &",
                " XLONG, XLAT, DT, DT_PREV, DX, &",
                " ids,ide, jds,jde, kds,kde, &",
                " ims,ime, jms,jme, kms,kme, &",
                " i_start(ij),i_end(ij), j_start(ij),j_end(ij), kts, kte)",
                "    DO j=j_start(ij),j_end(ij)",
                "    DO i=i_start(ij),i_end(ij)",
                " SFCEVP(I,J)= SFCEVP(I,J) + QFX(I,J)*DTBL",
                " IF(PRESENT(ACHFX))ACHFX(I,J)=ACHFX(I,J) + HFX(I,J)*DT",
                " IF(PRESENT(ACLHF))ACLHF(I,J)=ACLHF(I,J) + LH(I,J)*DT",
                "    ENDDO",
                "    ENDDO",
                " CALL wrf_debug(100,'in SFCDIAGS')",
                "   CALL SFCDIAGS(hfx,qfx,tsk,qsfc,chs2,cqs2,t2,th2,q2,      &",
                " psfc,cp,r_d,rcp,CHS,t_phy,qv_curr,ua_phys,    &",
                " ids,ide, jds,jde, kds,kde, &",
                " ims,ime, jms,jme, kms,kme, &",
                " i_start(ij),i_end(ij), j_start(ij),j_end(ij), kts,kte    )",
                "       ENDIF"
            ]
        }
    },
    "Makefile": {
        "filePath": "phys",
        "query": {
            "module_sf_slab.o": [
                " module_sf_suews.o  \\"
            ],
            "module_sf_gfdl.o": [
                " module_sf_suewsdrv.o  \\"
            ]
        }
    },
    "depend.common": {
        "filePath": "main",
        "query": {
            "# DEPENDENCIES for phys": [
                "module_sf_suews.o: module_sf_suewsdrv.o"
            ],
            "module_sf_slab.o": [
                " module_sf_suews.o   \\"
            ]
        }
    }
}